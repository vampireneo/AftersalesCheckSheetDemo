package hk.com.inchcape.aftersaleschecksheetdemo;

import com.google.android.glass.app.Card;
import com.google.android.glass.media.Sounds;
import com.google.android.glass.touchpad.Gesture;
import com.google.android.glass.touchpad.GestureDetector;
import com.google.android.glass.widget.CardScrollAdapter;
import com.google.android.glass.widget.CardScrollView;

import android.app.Activity;
import android.content.Context;
import android.graphics.drawable.Drawable;
import android.media.AudioManager;
import android.media.Image;
import android.os.Bundle;
import android.util.Log;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.RemoteViews;
import android.widget.TextView;

import java.util.ArrayList;
import java.util.List;
import java.util.jar.Attributes;

/**
 * An {@link Activity} showing a tuggable "Hello World!" card.
 * <p>
 * The main content view is composed of a one-card {@link CardScrollView} that provides tugging
 * feedback to the user when swipe gestures are detected.
 * If your Glassware intends to intercept swipe gestures, you should set the content view directly
 * and use a {@link com.google.android.glass.touchpad.GestureDetector}.
 * @see <a href="https://developers.google.com/glass/develop/gdk/touch">GDK Developer Guide</a>
 */
public class MainActivity extends Activity {

    /** {@link CardScrollView} to use as the main content view. */
    //private CardScrollView mCardScroller;

    /** "Hello World!" {@link View} generated by {@link #buildView(int id)}. */
    private View mView;

    private List<Card> mCards;
    private List<RelativeLayout> viewCards;

    private GestureDetector mGestureDetector;
    public static String TAG = "GLASS DEMO";

    private int currentIndex;

    @Override
    protected void onCreate(Bundle bundle) {
        super.onCreate(bundle);

        setContentView(R.layout.aftersales_check_sheet_demo);

        currentIndex = 0;
        changeView(currentIndex);

        /*
        viewCards = new ArrayList<RelativeLayout>();
        RelativeLayout layout = (RelativeLayout) findViewById(R.id.basicCardLayout);
        viewCards.add(layout);

        //mView = buildView(1);
        mCards = buildView();

        mCardScroller = new CardScrollView(this);
        mCardScroller.setAdapter(new CardScrollAdapter() {
            @Override
            public int getCount() {
                return viewCards.size();
            }

            @Override
            public Object getItem(int i) {
                return viewCards.get(i);
            }

            @Override
            public View getView(int i, View view, ViewGroup viewGroup) {
                return viewCards.get(i);
            }

            @Override
            public int getPosition(Object o) {
                return viewCards.indexOf(o);
            }
        });
         */
        /*
        mCardScroller.setAdapter(new CardScrollAdapter() {
            @Override
            public int getCount() {
                return mCards.size();
            }

            @Override
            public Object getItem(int position) {
                return mCards.get(position);
            }

            @Override
            public View getView(int position, View convertView, ViewGroup parent) {
                return mCards.get(position).getView(convertView, parent);
            }

            @Override
            public int getPosition(Object item) {
                return mCards.indexOf(item);
            }

            @Override
            public int getItemViewType(int position){
                return mCards.get(position).getItemViewType();
            }
        });
        */

        //setContentView(mCardScroller);

        mGestureDetector = new GestureDetector(this);

        mGestureDetector.setBaseListener(new GestureDetector.BaseListener() {
                                             @Override
                                             public boolean onGesture(Gesture gesture) {
                                                 if (gesture == Gesture.TAP) {
                                                     Log.v(TAG, "TAP");
                                                     AudioManager am = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
                                                     am.playSoundEffect(Sounds.TAP);
                                                     openOptionsMenu();
                                                     return true;
                                                 } else if (gesture == Gesture.TWO_TAP) {
                                                     Log.v(TAG, "TWO_TAP");
                                                     return true;
                                                 } else if (gesture == Gesture.LONG_PRESS) {
                                                     Log.v(TAG, "LONG_PRESS");
                                                     return true;
                                                 } else if (gesture == Gesture.SWIPE_RIGHT) {
                                                     Log.v(TAG, "SWIPE_RIGHT");
                                                     if (++currentIndex > 3) currentIndex = 3;
                                                     changeView(currentIndex);
                                                     return true;
                                                 } else if (gesture == Gesture.SWIPE_LEFT) {
                                                     Log.v(TAG, "SWIPE_LEFT");
                                                     if (--currentIndex < 1) currentIndex = 1;
                                                     changeView(currentIndex);
                                                     return true;
                                                 } else if (gesture == Gesture.SWIPE_DOWN) {
                                                     Log.v(TAG, "SWIPE_DOWN");
                                                     return false;
                                                 } else if (gesture == Gesture.SWIPE_UP) {
                                                     Log.v(TAG, "SWIPE_UP");
                                                     return true;
                                                 } else if (gesture == Gesture.THREE_LONG_PRESS) {
                                                     Log.v(TAG, "THREE_LONG_PRESS");
                                                     return true;
                                                 } else if (gesture == Gesture.THREE_TAP) {
                                                     Log.v(TAG, "THREE_TAP");
                                                     return true;
                                                 } else if (gesture == Gesture.TWO_LONG_PRESS) {
                                                     Log.v(TAG, "TWO_LONG_PRESS");
                                                     return true;
                                                 } else if (gesture == Gesture.TWO_SWIPE_DOWN) {
                                                     Log.v(TAG, "TWO_SWIPE_DOWN");
                                                     return false;
                                                 } else if (gesture == Gesture.TWO_SWIPE_LEFT) {
                                                     Log.v(TAG, "TWO_SWIPE_LEFT");
                                                     return true;
                                                 } else if (gesture == Gesture.TWO_SWIPE_RIGHT) {
                                                     Log.v(TAG, "TWO_SWIPE_RIGHT");
                                                     return true;
                                                 } else if (gesture == Gesture.TWO_SWIPE_UP) {
                                                     Log.v(TAG, "TWO_SWIPE_UP");
                                                     return true;
                                                 }

                                                 return false;
                                             }
                                         });
    }

    @Override
    public boolean onGenericMotionEvent(MotionEvent event) {
        if (mGestureDetector != null) {
            return mGestureDetector.onMotionEvent(event);
        }
        return false;
    }

    @Override
    protected void onResume() {
        super.onResume();
        //mCardScroller.activate();
    }

    @Override
    protected void onPause() {
        //mCardScroller.deactivate();
        super.onPause();
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.aftersales_check_sheet_demo, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle item selection. Menu items typically start another
        // activity, start a service, or broadcast another intent.
        switch (item.getItemId()) {
            case R.id.action_stop:
                finish();
                return true;
            default:
                return super.onOptionsItemSelected(item);
        }
    }

    private List<Card> buildView() {
        List<Card> cards = new ArrayList<Card>();
        Card card;
        for (int i = 1; i <= 8; i++) {
            card = buildView(i);
            cards.add(card);
        }
        return cards;
    }

    private void changeView(int id) {
        ImageView img = (ImageView) findViewById(R.id.imageView);
        TextView instruction = (TextView) findViewById(R.id.instruction_text);
        TextView section = (TextView) findViewById(R.id.section_text);
        Drawable drawable;
        img.setVisibility(View.VISIBLE);
        switch (id) {
            case 1:
                drawable = getResources().getDrawable(R.drawable.prius_v_1);
                img.setImageDrawable(drawable);
                instruction.setText("Inspect correct floor mats are used and properly installed");
                section.setText("Driver Seat");
                break;
            case 2:
                drawable = getResources().getDrawable(R.drawable.prius_v_2);
                img.setImageDrawable(drawable);
                instruction.setText("Inspect door, door locks and handles, room light, seat, seat belt and weather strip");
                section.setText("Right Front Door");
                break;
            case 3:
                drawable = getResources().getDrawable(R.drawable.prius_v_3);
                img.setImageDrawable(drawable);
                instruction.setText("Inspect door, window, door locks and handles, room light, seat, seat belt and weather strip");
                section.setText("Right Rear Door");
                break;
            default:
                drawable = getResources().getDrawable(R.drawable.prius_v_3);
                img.setImageDrawable(drawable);
                img.setVisibility(View.INVISIBLE);
                instruction.setText("");
                section.setText("");
                break;
        }
    }

    /**
     * Builds a Glass styled "Hello World!" view using the {@link Card} class.
     */
    private Card buildView(int id) {
        Card card = new Card(this);
        switch (id) {
            case 1:
                card.setText("Inspect correct floor mats are used and properly installed");
                card.setFootnote("Driver Seat");
                card.setImageLayout(Card.ImageLayout.FULL);
                card.addImage(R.drawable.prius_v_1);
                break;
            case 2:
                card.setText("Inspect door, door locks and handles, room light, seat, seat belt and weather strip");
                card.setFootnote("Right Front Door");
                card.setImageLayout(Card.ImageLayout.FULL);
                card.addImage(R.drawable.prius_v_2);
                break;
            case 3:
                card.setText("Inspect door, window, door locks and handles, room light, seat, seat belt and weather strip");
                card.setFootnote("Right Rear Door");
                card.setImageLayout(Card.ImageLayout.FULL);
                card.addImage(R.drawable.prius_v_3);
                break;
            case 4:
                card.setText("Inspect rear license plate, mounting screws, license plate lights, wiper and antenna");
                card.setFootnote("Rear Part of Vehicle");
                card.setImageLayout(Card.ImageLayout.FULL);
                card.addImage(R.drawable.prius_v_4);
                break;
            case 5:
                card.setText("Inspect fuel filling cap");
                card.setFootnote("Fuel Fulling Cap");
                card.setImageLayout(Card.ImageLayout.FULL);
                card.addImage(R.drawable.prius_v_5);
                break;
            case 6:
                card.setText("Inspect door, window, door locks and handles, room light, seat, seat belt and weather strip");
                card.setFootnote("Left Rear Door");
                card.setImageLayout(Card.ImageLayout.FULL);
                card.addImage(R.drawable.prius_v_6);
                break;
            case 7:
                card.setText("Inspect door, window, door locks and handles, room light, seat, seat belt and weather strip");
                card.setFootnote("Left Front Door");
                card.setImageLayout(Card.ImageLayout.FULL);
                card.addImage(R.drawable.prius_v_7);
                break;
            case 8:
                card.setText("Inspect license plate and mounting screws");
                card.setFootnote("Engine Compartment");
                card.setImageLayout(Card.ImageLayout.FULL);
                card.addImage(R.drawable.prius_v_8);
                break;
            default:
                card.setText("");
                card.setFootnote("");
                card.setImageLayout(Card.ImageLayout.FULL);
                break;
        }
        return card;
    }

}
