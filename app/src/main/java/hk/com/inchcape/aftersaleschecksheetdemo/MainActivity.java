package hk.com.inchcape.aftersaleschecksheetdemo;

import com.google.android.glass.app.Card;
import com.google.android.glass.media.Sounds;
import com.google.android.glass.touchpad.Gesture;
import com.google.android.glass.touchpad.GestureDetector;
import com.google.android.glass.widget.CardScrollAdapter;
import com.google.android.glass.widget.CardScrollView;

import android.app.Activity;
import android.content.Context;
import android.media.AudioManager;
import android.os.Bundle;
import android.util.Log;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;

/**
 * An {@link Activity} showing a tuggable "Hello World!" card.
 * <p>
 * The main content view is composed of a one-card {@link CardScrollView} that provides tugging
 * feedback to the user when swipe gestures are detected.
 * If your Glassware intends to intercept swipe gestures, you should set the content view directly
 * and use a {@link com.google.android.glass.touchpad.GestureDetector}.
 * @see <a href="https://developers.google.com/glass/develop/gdk/touch">GDK Developer Guide</a>
 */
public class MainActivity extends Activity {

    /** {@link CardScrollView} to use as the main content view. */
    private CardScrollView mCardScroller;

    /** "Hello World!" {@link View} generated by {@link #buildView()}. */
    private View mView;

    private GestureDetector mGestureDetector;
    public static String TAG = "GLASS DEMO";

    @Override
    protected void onCreate(Bundle bundle) {
        super.onCreate(bundle);

        mView = buildView();

        mCardScroller = new CardScrollView(this);
        mCardScroller.setAdapter(new CardScrollAdapter() {
            @Override
            public int getCount() {
                return 1;
            }

            @Override
            public Object getItem(int position) {
                return mView;
            }

            @Override
            public View getView(int position, View convertView, ViewGroup parent) {
                return mView;
            }

            @Override
            public int getPosition(Object item) {
                if (mView.equals(item)) {
                    return 0;
                }
                return AdapterView.INVALID_POSITION;
            }
        });

        setContentView(mCardScroller);

        mGestureDetector = new GestureDetector(this);

        mGestureDetector.setBaseListener(new GestureDetector.BaseListener() {
                                             @Override
                                             public boolean onGesture(Gesture gesture) {
                                                 if (gesture == Gesture.TAP || gesture == Gesture.LONG_PRESS) {
                                                     Log.v(TAG, gesture == Gesture.TAP ? "TAP" : "LONG_PRESS");
                                                     AudioManager am = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
                                                     am.playSoundEffect(Sounds.TAP);
                                                     openOptionsMenu();
                                                     return true;
                                                 } else if (gesture == Gesture.TWO_TAP) {
                                                     Log.v(TAG, "TWO_TAP");
                                                     return true;
                                                 } else if (gesture == Gesture.SWIPE_RIGHT) {
                                                     Log.v(TAG, "SWIPE_RIGHT");
                                                     return true;
                                                 } else if (gesture == Gesture.SWIPE_LEFT) {
                                                     return true;
                                                 } else if (gesture == Gesture.SWIPE_DOWN) {
                                                     Log.v(TAG, "SWIPE_DOWN");
                                                     return false;
                                                 } else if (gesture == Gesture.SWIPE_UP) {
                                                     Log.v(TAG, "SWIPE_UP");
                                                     return true;
                                                 } else if (gesture == Gesture.THREE_LONG_PRESS) {
                                                     Log.v(TAG, "THREE_LONG_PRESS");
                                                     return true;
                                                 } else if (gesture == Gesture.THREE_TAP) {
                                                     Log.v(TAG, "THREE_TAP");
                                                     return true;
                                                 } else if (gesture == Gesture.TWO_LONG_PRESS) {
                                                     Log.v(TAG, "TWO_LONG_PRESS");
                                                     return true;
                                                 } else if (gesture == Gesture.TWO_SWIPE_DOWN) {
                                                     Log.v(TAG, "TWO_SWIPE_DOWN");
                                                     return false;
                                                 } else if (gesture == Gesture.TWO_SWIPE_LEFT) {
                                                     Log.v(TAG, "TWO_SWIPE_LEFT");
                                                     return true;
                                                 } else if (gesture == Gesture.TWO_SWIPE_RIGHT) {
                                                     Log.v(TAG, "TWO_SWIPE_RIGHT");
                                                     return true;
                                                 } else if (gesture == Gesture.TWO_SWIPE_UP) {
                                                     Log.v(TAG, "TWO_SWIPE_UP");
                                                     return true;
                                                 }

                                                 return false;
                                             }
                                         });
    }

    @Override
    public boolean onGenericMotionEvent(MotionEvent event) {
        if (mGestureDetector != null) {
            return mGestureDetector.onMotionEvent(event);
        }
        return false;
    }

    @Override
    protected void onResume() {
        super.onResume();
        mCardScroller.activate();
    }

    @Override
    protected void onPause() {
        mCardScroller.deactivate();
        super.onPause();
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.aftersales_check_sheet_demo, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle item selection. Menu items typically start another
        // activity, start a service, or broadcast another intent.
        switch (item.getItemId()) {
            case R.id.action_stop:
                finish();
                return true;
            default:
                return super.onOptionsItemSelected(item);
        }
    }

    /**
     * Builds a Glass styled "Hello World!" view using the {@link Card} class.
     */
    private View buildView() {
        Card card = new Card(this);

        card.setText(R.string.hello_world);
        return card.getView();
    }

}
